{
  "version": 3,
  "sources": ["../../../../../Modules/TaskDB/Task/TaskPage.tsx", "../../../../../Modules/ServerTypes/TaskDB/TaskColumns.ts", "../../../../../Modules/ServerTypes/Modules/TaskDB.Task.Status.ts", "../../../../../Modules/ServerTypes/TaskDB/TaskForm.ts", "../../../../../Modules/ServerTypes/Modules/TaskDB.Task.Priority.ts", "../../../../../Modules/ServerTypes/TaskDB/TaskRow.ts", "../../../../../Modules/ServerTypes/TaskDB/TaskService.ts", "../../../../../Modules/TaskDB/Task/TaskGrid.tsx", "../../../../../Modules/TaskDB/Task/TaskDialog.tsx"],
  "sourcesContent": ["\uFEFFimport { gridPageInit } from '@serenity-is/corelib';\r\nimport { TaskGrid } from './TaskGrid';\r\n\r\nexport default () => gridPageInit(TaskGrid);", "\uFEFFimport { ColumnsBase, fieldsProxy } from \"@serenity-is/corelib\";\nimport { Column } from \"@serenity-is/sleekgrid\";\nimport { Status } from \"../Modules/TaskDB.Task.Status\";\nimport { TaskRow } from \"./TaskRow\";\n\nexport interface TaskColumns {\n    TaskId: Column<TaskRow>;\n    Title: Column<TaskRow>;\n    Description: Column<TaskRow>;\n    Status: Column<TaskRow>;\n    Priority: Column<TaskRow>;\n    DateCreated: Column<TaskRow>;\n    DueDate: Column<TaskRow>;\n}\n\nexport class TaskColumns extends ColumnsBase<TaskRow> {\n    static readonly columnsKey = 'TaskDB.Task';\n    static readonly Fields = fieldsProxy<TaskColumns>();\n}\n\n[Status]; // referenced types", "\uFEFFimport { Decorators } from \"@serenity-is/corelib\";\n\nexport enum Status {\n    Pending = 1,\n    In_Progress = 2,\n    Completed = 3\n}\nDecorators.registerEnumType(Status, 'ToDoApp.Modules.TaskDB.Task.Status', 'TaskDB.Status');", "\uFEFFimport { StringEditor, TextAreaEditor, EnumEditor, DateEditor, PrefixedContext, initFormType } from \"@serenity-is/corelib\";\nimport { Priority } from \"../Modules/TaskDB.Task.Priority\";\nimport { Status } from \"../Modules/TaskDB.Task.Status\";\n\nexport interface TaskForm {\n    Title: StringEditor;\n    Description: TextAreaEditor;\n    Status: EnumEditor;\n    Priority: EnumEditor;\n    DueDate: DateEditor;\n}\n\nexport class TaskForm extends PrefixedContext {\n    static readonly formKey = 'TaskDB.Task';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!TaskForm.init)  {\n            TaskForm.init = true;\n\n            var w0 = StringEditor;\n            var w1 = TextAreaEditor;\n            var w2 = EnumEditor;\n            var w3 = DateEditor;\n\n            initFormType(TaskForm, [\n                'Title', w0,\n                'Description', w1,\n                'Status', w2,\n                'Priority', w2,\n                'DueDate', w3\n            ]);\n        }\n    }\n}\n\n[Status, Priority]; // referenced types", "\uFEFFimport { Decorators } from \"@serenity-is/corelib\";\n\nexport enum Priority {\n    Low = 1,\n    Medium = 2,\n    High = 3\n}\nDecorators.registerEnumType(Priority, 'ToDoApp.Modules.TaskDB.Task.Priority', 'TaskDB.Priority');", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib\";\nimport { Priority } from \"../Modules/TaskDB.Task.Priority\";\nimport { Status } from \"../Modules/TaskDB.Task.Status\";\n\nexport interface TaskRow {\n    TaskId?: number;\n    Title?: string;\n    Description?: string;\n    Status?: Status;\n    DateCreated?: string;\n    DateUpdated?: string;\n    DueDate?: string;\n    Priority?: Priority;\n}\n\nexport abstract class TaskRow {\n    static readonly idProperty = 'TaskId';\n    static readonly nameProperty = 'Title';\n    static readonly localTextPrefix = 'TaskDB.Task';\n    static readonly deletePermission = 'Administration:General';\n    static readonly insertPermission = 'Administration:General';\n    static readonly readPermission = 'Administration:General';\n    static readonly updatePermission = 'Administration:General';\n\n    static readonly Fields = fieldsProxy<TaskRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib\";\nimport { TaskRow } from \"./TaskRow\";\n\nexport namespace TaskService {\n    export const baseUrl = 'TaskDB/Task';\n\n    export declare function Create(request: SaveRequest<TaskRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): PromiseLike<SaveResponse>;\n    export declare function Update(request: SaveRequest<TaskRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): PromiseLike<SaveResponse>;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): PromiseLike<DeleteResponse>;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<TaskRow>) => void, opt?: ServiceOptions<any>): PromiseLike<RetrieveResponse<TaskRow>>;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<TaskRow>) => void, opt?: ServiceOptions<any>): PromiseLike<ListResponse<TaskRow>>;\n\n    export const Methods = {\n        Create: \"TaskDB/Task/Create\",\n        Update: \"TaskDB/Task/Update\",\n        Delete: \"TaskDB/Task/Delete\",\n        Retrieve: \"TaskDB/Task/Retrieve\",\n        List: \"TaskDB/Task/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>TaskService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\nimport { TaskColumns, TaskRow, TaskService } from '@/ServerTypes/TaskDB';\r\nimport { Decorators, EntityGrid } from '@serenity-is/corelib';\r\nimport { TaskDialog } from './TaskDialog';\r\n\r\n@Decorators.registerClass('ToDoApp.TaskDB.TaskGrid')\r\nexport class TaskGrid extends EntityGrid<TaskRow> {\r\n    protected getColumnsKey() { return TaskColumns.columnsKey; }\r\n    protected getDialogType() { return TaskDialog; }\r\n    protected getRowDefinition() { return TaskRow; }\r\n    protected getService() { return TaskService.baseUrl; }\r\n}", "import { TaskForm, TaskRow, TaskService } from '@/ServerTypes/TaskDB';\r\nimport { Decorators, EntityDialog } from '@serenity-is/corelib';\r\n\r\n@Decorators.registerClass('ToDoApp.TaskDB.TaskDialog')\r\nexport class TaskDialog extends EntityDialog<TaskRow, any> {\r\n    protected getFormKey() { return TaskForm.formKey; }\r\n    protected getRowDefinition() { return TaskRow; }\r\n    protected getService() { return TaskService.baseUrl; }\r\n\r\n    protected form = new TaskForm(this.idPrefix);\n}"],
  "mappings": "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",
  "names": ["import_corelib", "import_corelib", "import_corelib", "Status", "_TaskColumns", "__name", "TaskColumns", "import_corelib", "import_corelib", "Priority", "_TaskForm", "prefix", "w0", "w1", "w2", "w3", "__name", "TaskForm", "import_corelib", "_TaskRow", "__name", "TaskRow", "import_corelib", "TaskService", "x", "r", "s", "o", "import_corelib", "import_corelib", "_TaskDialog_decorators", "_init", "_a", "_TaskDialog", "TaskForm", "TaskRow", "TaskService", "__decoratorStart", "__decorateElement", "__name", "__runInitializers", "TaskDialog", "_TaskGrid_decorators", "_init", "_a", "_TaskGrid", "TaskColumns", "TaskDialog", "TaskRow", "TaskService", "__decoratorStart", "__decorateElement", "__name", "__runInitializers", "TaskGrid", "TaskPage_default", "__name", "TaskGrid"]
}
